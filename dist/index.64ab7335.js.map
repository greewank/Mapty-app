{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    //this.data...\n    //this.id...\n    this.coords = coords; //Array of coordinates mainly lat and long [lat, lng]\n    this.distance = distance; // in kilometres\n    this.duration = duration; // in minutes\n  }\n\n  _setDescription() {\n    // prettier-ignore\n\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November','December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    //km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const running1 = new Running([71, -4.3], 29, 30, 178);\n// const cycling1 = new Cycling([71, -4.3], 34, 100, 143);\n// console.log(running1, cycling1);\n//////////////////////////////////////\n// Implementation of application architecture.\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  // Here map and mapEvent are going to be private instance properties; properties that are going to be on all the instances created through this class.\n  //   However, private instanct properties hasn't been officially introduced in JS.\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n  constructor() {\n    // Returns users positions\n    this._getPosition();\n\n    // Gets local storage\n    this._getLocalStorage();\n    // Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  //   1st function\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert(\"The position couldn't be found.\");\n        }\n      );\n  }\n\n  //   2nd function\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    // console.log(`https://www.google.com/maps/@${latitude},${longitude}`);\n\n    const coords = [latitude, longitude];\n    // console.log(this);\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    // This 'on' method is coming from Leaflet library which which is stored in map variable and is used instead of addEventListener here / an event created by leaflet.\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  //   3rd function\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputElevation.value =\n        '';\n\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  //   4th function\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  //   5th function\n\n  _newWorkout(e) {\n    // Helper function for checking if number is finite or not\n    const validity = (...inputs) => inputs.every(inp => Number.isFinite(inp));\n\n    // Helper function for checking positive or not\n    const positive = (...inputs) => inputs.every(inp => inp > 0);\n\n    // Displays the marker after you submit the form in the exact location.\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    //If activity running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      // Check if data is valid\n      // Usage of guard clause if this condition is true then immediately return the function\n      if (\n        !validity(distance, duration, cadence) ||\n        !positive(distance, duration, cadence)\n      )\n        return alert(\"The input isn't a positive number!\");\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If activity cycling, create cycling object.\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n\n      if (\n        !validity(distance, duration, elevation) ||\n        !positive(distance, duration)\n      )\n        return alert(\"The input isn't a positive number!\");\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    // Push the new workout object to #workout array\n    this.#workouts.push(workout);\n    console.log(workout);\n\n    //Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n\n    //Render workout as list\n    this._renderWorkout(workout);\n\n    // Hide forms + Clear the input fields\n    this._hideForm();\n\n    // Set localStorage to all the workouts\n    this._setLocalStorage();\n    // console.log(this.#mapEvent);\n  }\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n        <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n            <h2 class=\"workout__title\">${workout.description}</h2>\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">${\n                  workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n                }</span>\n                <span class=\"workout__value\">${workout.distance}</span>\n                <span class=\"workout__unit\">km</span>\n            </div>\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">⏱</span>\n                <span class=\"workout__value\">${workout.duration}</span>\n                <span class=\"workout__unit\">min</span>\n            </div>\n        `;\n    if (workout.type === 'running')\n      html += `\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">⚡️</span>\n                <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n                <span class=\"workout__unit\">min/km</span>\n            </div>\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">🦶🏼</span>\n                <span class=\"workout__value\">${workout.cadence}</span>\n                <span class=\"workout__unit\">spm</span>\n            </div>\n        </li>     \n        `;\n    if (workout.type === 'cycling')\n      html += `\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">⚡️</span>\n                <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n                <span class=\"workout__unit\">km/h</span>\n            </div>\n            <div class=\"workout__details\">\n                <span class=\"workout__icon\">⛰</span>\n                <span class=\"workout__value\">${workout.elevationGain}</span>\n                <span class=\"workout__unit\">m</span>\n            </div>\n        </li>\n        `;\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n\n    // Usage of guard clause if this condition is true then immediately return the function\n\n    if (!workoutEl) return;\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    // The setView method takes the screen to the current marker position.\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n\n    // using the public interface, every object will have this property\n    // workout.click();\n    // But since the object coming from localStorage will not inherit this which is why it's better not to use it\n  }\n\n  _setLocalStorage() {\n    // JSON.stringify: Converts objects to strings in javascript\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    // JSON.parse() converts string to objects in JS.\n    const data = JSON.parse(localStorage.getItem('workouts'));\n    console.log(data);\n\n    if (!data) return;\n\n    // If there is some existing data in the localStorage, this.#workouts will be equal to it.\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    // location is a big object that contains many properties and reload is one of them.\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":["Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","click","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapZoomLevel","mapEvent","workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","validity","inputs","every","inp","Number","isFinite","positive","preventDefault","lat","lng","latlng","workout","elevation","push","console","log","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload","app"],"version":3,"file":"index.64ab7335.js.map"}